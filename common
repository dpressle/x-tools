#!/bin/bash
#

REPLY=""

function get_project() {
	PDIR=$1
	if [ -e "$PDIR/scripts/faddr2line" ]; then
		REPLY="kernel"
		return
	fi

	if [ -e "$PDIR/buildlib/cbuild" ]; then
		REPLY="rdma-core"
		return
	fi

	if [ -e "$PDIR/rdma/rdma.h" ]; then
		REPLY="iproute"
		return
	fi

	if [ -e "$PDIR/x" ]; then
		REPLY="x-tools"
		return
	fi

	REPLY=""
}

function checkpatch() {
	PDIR=$1
	sed -i "/^Issue:[ 0-9]*/Id" $PDIR/*.patch
	sed -i "/^Change-id:[ 0-9]*/Id" $PDIR/*.patch

	get_project $PDIR
	PROJECT=$REPLY

	if [ "$PROJECT" != "kernel" ]; then
		IN_TREE="--no-tree --ignore PREFER_KERNEL_TYPES,FILE_PATH_CHANGES,EXECUTE_PERMISSIONS"
	else
		IN_TREE=""
	fi

	for file in $PDIR/*.patch; do
		[ -e "$file" ] || continue
		[ "$file" != "$PDIR/0000-cover-letter.patch" ] || continue
		perl $CHECKPATCH $IN_TREE --strict -q $file
	done
}

function check_ssh_access() {
	local ADDR=$1
	set +e
	ssh -q -o ConnectTimeout=2 $ADDR exit
	local SSH_READY=$?
	set -e
	REPLY=$SSH_READY
}

function numb_of_cpus() {
	REPLY=$( lscpu | grep "CPU(s): " | head -n 1 | awk '{print $2}' )
}

function get_passthrough_line() {
	VM_MACHINE=$1
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '{print " -device vfio-pci,host="$2} ' | tr -d '\n' )
}

function get_simx_devices_line() {
	VM_MACHINE=$1
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '{print " -device "$2} ' | tr -d '\n' )
}

function mass_vfio_bind() {
	VM_MACHINE=$1
	echo "Binding devices, it takes time ...."
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '{print $2} ' | xargs -n1 sudo $DIR/vfio-pci-bind )
}

function qemu_location() {
	VM_MACHINE=$1
	IS_QEMU=$(grep $VM_MACHINE $DIR/machines.db | awk '/000/{print $2} ' | wc -l )
	if [ "$IS_QEMU" -eq 0 ]; then
		REPLY=$X_BI_SIMX
	else
		REPLY="qemu-system-x86_64"
	fi
}

function is_qemu() {
	VM_MACHINE=$1
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '/000/{print $2} ' | wc -l )
}


