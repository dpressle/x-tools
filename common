#!/bin/bash
#

REPLY=""

function get_project() {
	PDIR=$1
	if [ -e "$PDIR/scripts/faddr2line" ]; then
		REPLY="kernel"
		return
	fi

	if [ -e "$PDIR/buildlib/cbuild" ]; then
		REPLY="rdma-core"
		return
	fi

	if [ -e "$PDIR/rdma/rdma.h" ]; then
		REPLY="iproute"
		return
	fi

	if [ -e "$PDIR/x" ]; then
		REPLY="x-tools"
		return
	fi

	REPLY=""
}

function checkpatch() {
	PDIR=$1
	sed -i "/^Issue:[ 0-9]*/Id" $PDIR/*.patch
	sed -i "/^Change-id:[ 0-9]*/Id" $PDIR/*.patch

	get_project $PDIR
	PROJECT=$REPLY

	if [ "$PROJECT" != "kernel" ]; then
		IN_TREE="--no-tree --ignore PREFER_KERNEL_TYPES,FILE_PATH_CHANGES,EXECUTE_PERMISSIONS"
	else
		IN_TREE=""
	fi

	for file in $PDIR/*.patch; do
		[ -e "$file" ] || continue
		[ "$file" != "$PDIR/0000-cover-letter.patch" ] || continue
		perl $CHECKPATCH $IN_TREE -q $file
	done
}

function check_ssh_access() {
	local ADDR=$1
	set +e
	ssh -q -o ConnectTimeout=2 $ADDR exit
	local SSH_READY=$?
	set -e
	REPLY=$SSH_READY
}

function numb_of_cpus() {
	REPLY=$( lscpu | grep "CPU(s): " | head -n 1 | awk '{print $2}' )
}

function get_passthrough_line() {
	VM_MACHINE=$1
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '{print " -device vfio-pci,host="$2} ' | tr -d '\n' )
}

function get_simx_devices_line() {
	VM_MACHINE=$1
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '{print " -device "$2} ' | tr -d '\n' )
}

function mass_vfio_bind() {
	VM_MACHINE=$1
	echo "Binding devices, it takes time ...."
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '{print $2} ' | xargs -n1 sudo $DIR/vfio-pci-bind )
}

function qemu_location() {
	VM_MACHINE=$1
	IS_QEMU=$(grep $VM_MACHINE $DIR/machines.db | awk '{print $3} ' | tail -n 1)
	if [ "$IS_QEMU" == "simx" ]; then
		REPLY=$X_BI_SIMX
	else
		REPLY="qemu-system-x86_64"
	fi
}

function is_qemu() {
	VM_MACHINE=$1
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '{print $3} ' | tail -n 1)
	if [ "$REPLY" == "simx" ]; then
		REPLY=0
	else
		REPLY=1
	fi
}

function get_image_type() {
	VM_MACHINE=$1
	REPLY=$(grep $VM_MACHINE $DIR/machines.db | awk '{print $3} ' | tail -n 1)
}

# Check if SSH is ready
# 255 means connection is not possible
# 0 means connection is possible
function block_till_ssh_is_ready() {
	SERVER=$1
	echo "Block till $SERVER SSH is ready"
	set +e
	ssh -q root@$SERVER exit
	SSH_READY=$?
	set -e
	while [ $SSH_READY -ne 0 ]; do
		set +e
		ssh -q root@$SERVER exit
		SSH_READY=$?
		set -e
		sleep 5s
	done
}

function get_arg_type() {
	ARG=$1
	IS_NUMBER=0
	case $ARG in
		''|*[!0-9]*) IS_NUMBER=0 ;;
		*) IS_NUMBER=1 ;;
	esac

	if [ $IS_NUMBER -eq 0 ]; then
		git show-ref --tags -q $ARG
		if [ $? -eq 0 ]; then
			REPLY="TAG"
			return
		fi

		git show-ref --heads -q $ARG
		if [ $? -eq 0 ]; then
			REPLY="BRANCH"
			return
		fi

		git rev-parse --verify -q $ARG > /dev/null
		if [ $? -eq 0 ]; then
			REPLY="SHA"
			return
		fi
	else
		REPLY="VER"
		return
	fi

	REPLY=""
}
