#!/bin/bash
#
# Prepare topic for the upstream submission.
# The flow is different for RDMA and other submissions
# > 1 patch:
#	- for rdma-rc/rdma-next needs tag to take cover letter from there
#	- for other patches leaves cover letter empty, to be filled
# == 1 patch:
#	- don't create cover letter
#

if [ "$#" -gt 3 ]; then
        echo "Usage: x fp <start commit sha1> <tag|end commit> [ver]"
	echo "	<start commit sha1> should be in upstream branch"
	echo "  <tag> is needed for rdma-rc/rdma-next for patch "
	echo "	      series which requires cover letter"
	echo "  <end commit> if omitted it will be single patch"
        exit 1
fi

. $HOME/.x-tools

export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $DIR/common

if [ "$#" -eq 0 ]; then
	START=$(git rev-parse --verify --short=12 HEAD)
	SINGLE_COMMIT=1
	COMMIT_RANGE="$START"
	VER_NUMB=0
	VER=""
fi

if [ "$#" -eq 1 ]; then
	get_arg_type $1
	SINGLE_COMMIT=1
	if [ r"$REPLY" == r"SHA" ]; then
		START=$(git rev-parse --verify --short=12 $1)
		VER_NUMB=0
		VER=""
	fi

	if [ r"$REPLY" == r"VER" ]; then
		START=$(git rev-parse --verify --short=12 HEAD)
		VER_NUMB=$1
		VER=" v$VER_NUMB"
	fi
	if [[ r"$REPLY" != r"SHA" && r"$REPLY" != r"VER" ]]; then
		echo "Unsupported option. Exiting ..."
		exit
	fi
	COMMIT_RANGE="$START"
fi

if [ "$#" -eq 2 ]; then
	get_arg_type $1
	if [ r"$REPLY" == r"SHA" ]; then
		START=$(git rev-parse --verify --short=12 $1)
	else
		echo "Unsupported option. Exiting ..."
		exit
	fi

	get_arg_type $2
	if [ r"$REPLY" == r"SHA" ]; then
		END=$(git rev-parse --verify --short=12 $2)
		VER_NUMB=0
		VER=""
		COMMIT_RANGE="$START..$END"
		if [ $(git rev-list --count $COMMIT_RANGE) -eq 1 ]; then
			SINGLE_COMMIT=1
		else
			SINGLE_COMMIT=0
		fi
	fi

	if [ r"$REPLY" == r"VER" ]; then
		VER_NUMB=$2
		VER=" v$VER_NUMB"
		COMMIT_RANGE="$START"
		SINGLE_COMMIT=1
	fi

	if [[ r"$REPLY" != r"SHA" && r"$REPLY" != r"VER" ]]; then
		echo "Unsupported option. Exiting ..."
		exit
	fi
fi

if [ "$#" -eq 3 ]; then
	get_arg_type $1
	SINGLE_COMMIT=0
	if [ r"$REPLY" == r"SHA" ]; then
		START=$(git rev-parse --verify --short=12 $1)
	else
		echo "Unsupported option. Exiting ..."
		exit
	fi

	get_arg_type $2
	if [ r"$REPLY" == r"SHA" ]; then
		END=$(git rev-parse --verify --short=12 $2)
		COMMIT_RANGE="$START..$END"
		if [ $(git rev-list --count $COMMIT_RANGE) -eq 1 ]; then
			SINGLE_COMMIT=1
		fi
	else
		echo "Unsupported option. Exiting ..."
		exit
	fi

	get_arg_type $3
	if [ r"$REPLY" == r"VER" ]; then
		VER_NUMB=$3
		VER=" v$VER_NUMB"
	fi

	if [ r"$REPLY" != r"VER" ]; then
		echo "Unsupported option. Exiting ..."
		exit
	fi
fi

RDMA_TAG=0

get_project $PWD
PROJECT=$REPLY

get_target $PROJECT
TARGET=$REPLY

DIRECTORY="$PATCHES_DIR/$TARGET/$START/$VER_NUMB"
if [ -d "$DIRECTORY" ]; then
	echo "$DIRECTORY exists, exiting ...."
	exit 1
fi

mkdir -p $DIRECTORY/

CCLIST=$(mktemp)
# Generate CC-list
git show -s $COMMIT_RANGE | grep "\-by\:" | awk -F": " '{print $2}' >> $CCLIST

# Add author of "Fixes" commit
COUNT_FIXES=$(git show -s $COMMIT_RANGE | grep "Fixes: " | awk '{print $2}' | sort | uniq | wc -l)
if [ $COUNT_FIXES -ne 0 ]; then
	git show -s $COMMIT_RANGE | grep "Fixes: " | awk '{print $2}' | sort | uniq | xargs git show --pretty=format:"%aN <%aE>" -s >> $CCLIST
	echo "" >> $CCLIST
fi

if [ "$TARGET" == "rdma-next" ] || [ "$TARGET" == "rdma-rc" ] || [ "$TARGET" == "rdma-core" ]; then
	TO="--to=Doug Ledford <dledford@redhat.com>, Jason Gunthorpe <jgg@mellanox.com>"
	LIST="RDMA mailing list <linux-rdma@vger.kernel.org>"
fi
if [ "$TARGET" == "iproute2-next" ]; then
	TO="--to=David Ahern <dsahern@gmail.com>"
	echo "Stephen Hemminger <stephen@networkplumber.org>" >> $CCLIST
	echo "RDMA mailing list <linux-rdma@vger.kernel.org>" >> $CCLIST
	LIST="netdev <netdev@vger.kernel.org>"
fi
if [ "$TARGET" == "iproute2-rc" ]; then
	TO="--to=Stephen Hemminger <stephen@networkplumber.org>"
	echo "David Ahern <dsahern@gmail.com>" >> $CCLIST
	echo "RDMA mailing list <linux-rdma@vger.kernel.org>" >> $CCLIST
	LIST="netdev <netdev@vger.kernel.org>"
fi

sort -uo $CCLIST $CCLIST

CC="--cc="
while IFS= read -r var
do
	# Need to replace for actual author
	if [[ $var != *"Romanovsky"* ]]; then
		LIST=$LIST", "$var
	fi
done < "$CCLIST"
CC=$CC$LIST

if [ $SINGLE_COMMIT -eq 1 ]; then
	git format-patch "$TO" "$CC" -M -C --no-cover-letter --no-signoff --subject-prefix "PATCH $TARGET$VER" -o $DIRECTORY/ -1 $COMMIT_RANGE
else
	git format-patch "$TO" "$CC" -M -C --cover-letter --no-signoff --subject-prefix "PATCH $TARGET$VER" -o $DIRECTORY/ $COMMIT_RANGE
fi

if [ $RDMA_TAG -eq 1 ]; then
	TITLE=$(git show tags/$TAG --oneline | head -n 3 | tail -n 1)
	sed -i "s/\*\*\* SUBJECT HERE \*\*\*/$TITLE/g" $DIRECTORY/0000-cover-letter.patch
	CONF=$(mktemp)
	git show --oneline  tags/$TAG | sed -e '/-----BEGIN PGP SIGNATURE-----/,$d' | tail -n +5 >> $CONF

	echo "" >> $CONF
	echo "The patches are available in the git repository at:" >> $CONF
	echo "  git.kernel.org/pub/scm/linux/kernel/git/leon/linux-rdma.git tags/$TAG" >> $CONF
	echo "" >> $CONF
	echo "	Thanks" >> $CONF
	echo "---------------------------------------" >> $CONF
	sed -i "/\*\*\* BLURB HERE \*\*\*/r $CONF" $DIRECTORY/0000-cover-letter.patch
	sed -i "/\*\*\* BLURB HERE \*\*\*/d" $DIRECTORY/0000-cover-letter.patch
fi

change_target $DIRECTORY/ $PROJECT
checkpatch $DIRECTORY/ $PROJECT
rm -rf $CCLIST
rm -rf $CONF
rm -f $DIRECTORY/latest
ln -sr $DIRECTORY $DIRECTORY/../latest
echo "-----------------------------------------------------------------------"
echo "x sync pull && git send-upstream $TARGET/$START/$VER_NUMB/*"
